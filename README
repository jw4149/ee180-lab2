In singletreading optimization, we focused on optimizing the computing functions. To increase FPS, We enabled the automatic vectorization of the compiler by changing the compiler flags to `CFLAGS=-Wall -c -O3 -fno-tree-vectorize -mfpu=neon` and vectorized the image information and simplified the calculations in the `grayscale()` and `sobelCalc()`. In the `grayscale()`, we initially converted the input image into a three-dimensional array representing the R, G, and B values. Instead of directly multiplying floating-point numbers, we manually computed the products of these numbers and 256. Subsequently, we rounded up these results and performed the multiplication with the array and parameters. To restore the original result, we left-shifted the outcomes by 8 bits. While this approach may sacrifice precision, the resulting video after grayscale conversion appeared visually similar to the original, which was satisfactory. Following optimization of the grayscale function, our frames per second increased to approximately 60. In the `sobelCalc()` function, we noticed that besides vectorizing, the two large for loops can also be optimized. Since the implementations of x convolution and y convolution had many shared components, there was no need to compute them twice in each convolution. Therefore, we computed the gray-scaled data of 9 positions each time and performed x convolution and y convolution utilizing them. After optimizing the sobelCalc(), our FPS increased from 60 to around 75.

In multithreading optimization, we reach ~96 FPS
We added four barriers, initialized and destroyed in `main.cpp` and mainly used in `sobel_mt.cpp`
`capReady` is used to make sure video capture devices setup are ready in both threads before preceding
`srcReady` ensures memory allocation for top and bottom halves of image is ready
`grayReady` makes sure image halves are turned into grayscale, and `sobelReady` is used to make sure `sobelCalc` finishes in both halves
In header file `sobel_alg.h` we need to declare these barriers are defined externally
When finishing processing two halves of image separately guaranteed by `sobelReady` barrier, we vertically concatenate two matrices
